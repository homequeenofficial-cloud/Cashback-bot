import asyncio
import logging
from datetime import datetime
import os
import json

import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
SPREADSHEET_ID = os.getenv("SHEET_ID")

CASHBACK_RATE = 0.03         # 3% –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
MAX_REDEEM_RATIO = 0.5       # —Å–ø–∏—Å—ã–≤–∞—Ç—å –º–æ–∂–Ω–æ –¥–æ 50% –ø–æ–∫—É–ø–∫–∏
# ====================

logging.basicConfig(level=logging.INFO)
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

def open_sheets():
    sa_info = json.loads(os.getenv("GSERVICE_JSON"))
    creds = Credentials.from_service_account_info(sa_info, scopes=[
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ])
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(SPREADSHEET_ID)
    try:
        ws_clients = sh.worksheet("Clients")
    except gspread.WorksheetNotFound:
        ws_clients = sh.add_worksheet(title="Clients", rows=1000, cols=10)
        ws_clients.append_row(["ID","–§–ò–û","–¢–µ–ª–µ—Ñ–æ–Ω","–ë–∞–ª–∞–Ω—Å_—Ç–∏—ã–Ω—ã","–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"])
    try:
        ws_ops = sh.worksheet("Operations")
    except gspread.WorksheetNotFound:
        ws_ops = sh.add_worksheet(title="Operations", rows=2000, cols=12)
        ws_ops.append_row(["–î–∞—Ç–∞","–¢–∏–ø","UserID","–§–ò–û","–¢–µ–ª–µ—Ñ–æ–Ω",
                           "–°—É–º–º–∞_–ø–æ–∫—É–ø–∫–∏_—Ç–∏—ã–Ω—ã","–°—É–º–º–∞_–∫–µ—à–±–µ–∫–∞_—Ç–∏—ã–Ω—ã",
                           "–ë–∞–ª–∞–Ω—Å_–¥–æ_—Ç–∏—ã–Ω—ã","–ë–∞–ª–∞–Ω—Å_–ø–æ—Å–ª–µ_—Ç–∏—ã–Ω—ã","–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
    return sh, ws_clients, ws_ops

sh, ws_clients, ws_ops = open_sheets()

def parse_amount_to_cents(text: str):
    try:
        return int(round(float(text.replace(",", ".")) * 100))
    except:
        return None

def cents_to_str(cents: int) -> str:
    return f"{cents/100:.2f}"

def get_client_row(user_id: int):
    data = ws_clients.get_all_values()
    for idx, row in enumerate(data[1:], start=2):
        if str(row[0]).strip() == str(user_id):
            return idx, row
    return None, None

def ensure_client(user_id: int, fio: str=None, phone: str=None):
    row_idx, row = get_client_row(user_id)
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if row_idx:
        if fio is not None: ws_clients.update_cell(row_idx, 2, fio)
        if phone is not None: ws_clients.update_cell(row_idx, 3, phone)
        return row_idx
    else:
        ws_clients.append_row([str(user_id), fio or "", phone or "", "0", now])
        return ws_clients.row_count

def get_balance_cents(user_id: int) -> int:
    row_idx, row = get_client_row(user_id)
    if not row_idx: return 0
    try: return int(row[3])
    except: return 0

def set_balance_cents(user_id: int, cents: int):
    row_idx, _ = get_client_row(user_id)
    if not row_idx:
        ensure_client(user_id)
        row_idx, _ = get_client_row(user_id)
    ws_clients.update_cell(row_idx, 4, str(cents))

def add_balance_cents(user_id: int, cents: int):
    set_balance_cents(user_id, get_balance_cents(user_id) + cents)

def log_operation(op_type, user_id, purchase_c=None, cashback_c=None, before=None, after=None, comment=""):
    row_idx, row = get_client_row(user_id)
    fio = row[1] if row else ""
    phone = row[2] if row else ""
    ws_ops.append_row([
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        op_type, str(user_id), fio, phone,
        str(purchase_c or 0), str(cashback_c or 0),
        str(before or ""), str(after or ""), comment
    ])

def kb_main(is_admin: bool):
    rows = [
        [KeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å")],
        [KeyboardButton(text="üí≥ –°–ø–∏—Å–∞—Ç—å –∫–µ—à–±–µ–∫")],
        [KeyboardButton(text="üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à–±–µ–∫")],
        [KeyboardButton(text="‚Ñπ –û –º–∞–≥–∞–∑–∏–Ω–µ")]
    ]
    if is_admin:
        rows += [[KeyboardButton(text="‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –∫–µ—à–±–µ–∫")],
                 [KeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")],
                 [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")]]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

def kb_phone():
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
                               resize_keyboard=True)

class Reg(StatesGroup):
    fio = State()
    phone = State()

@dp.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext):
    row_idx, row = get_client_row(message.from_user.id)
    is_admin = (message.from_user.id == ADMIN_ID)
    if not row_idx or not row[1] or not row[2]:
        await state.set_state(Reg.fio)
        await message.answer(
            "üí´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Home Queen Astana</b>!\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∏—Å–ª—è—Ç—å –∫–µ—à–±–µ–∫, —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–§–ò–û</b>.",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    await message.answer("‚ú® –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                         reply_markup=kb_main(is_admin))

@dp.message(Reg.fio)
async def reg_fio(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    if len(fio) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û.")
        return
    await state.update_data(fio=fio)
    ensure_client(message.from_user.id, fio=fio)
    await state.set_state(Reg.phone)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
                         reply_markup=kb_phone())

@dp.message(Reg.phone, F.contact)
async def reg_phone_contact(message: types.Message, state: FSMContext):
    phone = message.contact.phone_number
    fio = (await state.get_data()).get("fio", "")
    ensure_client(message.from_user.id, fio=fio, phone=phone)
    await state.clear()
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                         reply_markup=kb_main(message.from_user.id == ADMIN_ID))

@dp.message(Reg.phone)
async def reg_phone_text(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    fio = (await state.get_data()).get("fio", "")
    ensure_client(message.from_user.id, fio=fio, phone=phone)
    await state.clear()
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                         reply_markup=kb_main(message.from_user.id == ADMIN_ID))

@dp.message(F.text == "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    ensure_client(message.from_user.id)
    bal = get_balance_cents(message.from_user.id)
    await message.answer(f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å –∫–µ—à–±–µ–∫–∞: <b>{cents_to_str(bal)} ‚Ç∏</b>")

@dp.message(F.text == "üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à–±–µ–∫")
async def how_to(message: types.Message):
    await message.answer(
        "üìñ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à–±–µ–∫</b>\n\n"
        "1Ô∏è‚É£ –î–µ–ª–∞–π—Ç–µ –ø–æ–∫—É–ø–∫–∏ –≤ <b>Home Queen Astana</b>.\n"
        "2Ô∏è‚É£ –ü–æ–ª—É—á–∞–π—Ç–µ <b>3%</b> –æ—Ç —Å—É–º–º—ã –≤ –≤–∏–¥–µ –∫–µ—à–±–µ–∫–∞.\n"
        "3Ô∏è‚É£ –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–µ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–µ—à–±–µ–∫–æ–º <b>–¥–æ 50%</b> –æ—Ç —á–µ–∫–∞.\n"
        "4Ô∏è‚É£ –û—Å—Ç–∞–ª—å–Ω–æ–µ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π.\n\n"
        "‚ú® –ß–µ–º –±–æ–ª—å—à–µ –ø–æ–∫—É–ø–∞–µ—Ç–µ ‚Äî —Ç–µ–º –±–æ–ª—å—à–µ —ç–∫–æ–Ω–æ–º–∏—Ç–µ!"
    )

@dp.message(F.text == "‚Ñπ –û –º–∞–≥–∞–∑–∏–Ω–µ")
async def about_shop(message: types.Message):
    await message.answer("üè† <b>Home Queen Astana</b>\n–°—Ç–∏–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤–∞—à–µ–≥–æ –¥–æ–º–∞ ‚ú®\nüì± Instagram: @home_queen_astana")

@dp.message(F.text == "üí≥ –°–ø–∏—Å–∞—Ç—å –∫–µ—à–±–µ–∫")
async def use_cashback_start(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>—Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏</b> –∏ <b>—Å–∫–æ–ª—å–∫–æ –∫–µ—à–±–µ–∫–∞ —Å–ø–∏—Å–∞—Ç—å</b> —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ü—Ä–∏–º–µ—Ä: <code>10000 2000</code>",
                         reply_markup=ReplyKeyboardRemove())

@dp.message()
async def router(message: types.Message):
    txt = message.text.strip()

    if txt == "‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –∫–µ—à–±–µ–∫":
        if message.from_user.id != ADMIN_ID:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."); return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ: <code>user_id —Å—É–º–º–∞_–ø–æ–∫—É–ø–∫–∏</code>\n–ü—Ä–∏–º–µ—Ä: <code>123456789 10000</code>",
                             reply_markup=ReplyKeyboardRemove()); return

    if txt == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":
        if message.from_user.id != ADMIN_ID:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."); return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ: <code>user_id –Ω–æ–≤—ã–π_–±–∞–ª–∞–Ω—Å</code> (–≤ —Ç–µ–Ω–≥–µ)\n–ü—Ä–∏–º–µ—Ä: <code>123456789 2500</code>",
                             reply_markup=ReplyKeyboardRemove()); return

    if txt == "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤":
        if message.from_user.id != ADMIN_ID:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."); return
        count = max(0, len(ws_clients.get_all_values()) - 1)
        await message.answer(f"üë• –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: <b>{count}</b>"); return

    parts = txt.split()

    # –ö–ª–∏–µ–Ω—Ç: —Å–ø–∏—Å–∞–Ω–∏–µ "<purchase> <use>"
    if len(parts) == 2:
        purchase_c = parse_amount_to_cents(parts[0])
        use_c = parse_amount_to_cents(parts[1])
        if purchase_c and use_c:
            uid = message.from_user.id
            ensure_client(uid)
            before = get_balance_cents(uid)
            max_allowed = int(round(purchase_c * MAX_REDEEM_RATIO))
            if use_c > before:
                await message.answer(f"‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–µ—à–±–µ–∫–∞. –ë–∞–ª–∞–Ω—Å: <b>{cents_to_str(before)} ‚Ç∏</b>",
                                     reply_markup=kb_main(uid == ADMIN_ID)); return
            if use_c > max_allowed:
                await message.answer(f"‚ö† –ú–æ–∂–Ω–æ —Å–ø–∏—Å–∞—Ç—å –º–∞–∫—Å–∏–º—É–º <b>{cents_to_str(max_allowed)} ‚Ç∏</b> –¥–ª—è —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–∏.",
                                     reply_markup=kb_main(uid == ADMIN_ID)); return
            set_balance_cents(uid, before - use_c)
            after = before - use_c
            log_operation("SPEND", uid, purchase_c, use_c, before, after, "Client spend")
            await message.answer(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ <b>{cents_to_str(use_c)} ‚Ç∏</b>.\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{cents_to_str(after)} ‚Ç∏</b>",
                                 reply_markup=kb_main(uid == ADMIN_ID)); return

    # –ê–¥–º–∏–Ω: –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ "user_id —Å—É–º–º–∞_–ø–æ–∫—É–ø–∫–∏"
    if message.from_user.id == ADMIN_ID and len(parts) == 2 and parts[0].isdigit():
        uid = int(parts[0]); purchase_c = parse_amount_to_cents(parts[1])
        if purchase_c is not None:
            ensure_client(uid)
            before = get_balance_cents(uid)
            cashback_c = int(round(purchase_c * CASHBACK_RATE))
            add_balance_cents(uid, cashback_c)
            after = before + cashback_c
            log_operation("ADD_3_PERCENT", uid, purchase_c, cashback_c, before, after, "Admin add 3%")
            await message.answer(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ <b>{cents_to_str(cashback_c)} ‚Ç∏</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} "
                                 f"(3% –æ—Ç {cents_to_str(purchase_c)} ‚Ç∏).\n–ë–∞–ª–∞–Ω—Å: <b>{cents_to_str(after)} ‚Ç∏</b>",
                                 reply_markup=kb_main(True)); return

    # –ê–¥–º–∏–Ω: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞ "user_id –Ω–æ–≤—ã–π_–±–∞–ª–∞–Ω—Å"
    if message.from_user.id == ADMIN_ID and len(parts) == 2 and parts[0].isdigit():
        uid = int(parts[0]); new_bal_c = parse_amount_to_cents(parts[1])
        if new_bal_c is not None:
            ensure_client(uid)
            before = get_balance_cents(uid)
            set_balance_cents(uid, new_bal_c)
            log_operation("SET_BALANCE", uid, None, None, before, new_bal_c, "Admin set balance")
            await message.answer(f"üîÑ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ <b>{cents_to_str(new_bal_c)} ‚Ç∏</b>.",
                                 reply_markup=kb_main(True)); return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_main(message.from_user.id == ADMIN_ID))

async def main():
    logging.info("Bot started.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
